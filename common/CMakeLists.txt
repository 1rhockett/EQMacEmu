CMAKE_MINIMUM_REQUIRED(VERSION 3.2)

SET(common_sources
	base_packet.cpp
	classes.cpp
	condition.cpp
	crash.cpp
	crc16.cpp
	crc32.cpp
	database.cpp
	dbcore.cpp
	emu_constants.cpp
	emu_limits.cpp
	emu_opcodes.cpp
	emu_tcp_connection.cpp
	emu_tcp_server.cpp
	emu_versions.cpp
	eqdb.cpp
	eqdb_res.cpp
	eqemu_exception.cpp
	eqemu_config.cpp
	eqemu_logsys.cpp
	eq_limits.cpp
	eq_packet.cpp
	eq_stream.cpp
	eq_stream_factory.cpp
	eq_stream_ident.cpp
	eq_stream_proxy.cpp
	eqtime.cpp
	extprofile.cpp
	faction.cpp
	fastmath.cpp
	guild_base.cpp
	inventory_profile.cpp
	inventory_slot.cpp
	ipc_mutex.cpp
	item_data.cpp
	item_instance.cpp
	json_config.cpp
	light_source.cpp
	md5.cpp
	memory_buffer.cpp
	memory_mapped_file.cpp
	misc.cpp
	misc_functions.cpp
	mutex.cpp
	mysql_request_result.cpp
	mysql_request_row.cpp
	opcode_map.cpp
	opcodemgr.cpp
	packet_dump.cpp
	packet_dump_file.cpp
	packet_functions.cpp
	proc_launcher.cpp
	ptimer.cpp
	races.cpp
	rdtsc.cpp
	rulesys.cpp
	say_link.cpp
	sha1.cpp
	shareddb.cpp
	skills.cpp
	spdat.cpp
	strings.cpp
	struct_strategy.cpp
	textures.cpp
	tcp_connection.cpp
	tcp_server.cpp
	timeoutmgr.cpp
	timer.cpp
	unix.cpp
	uuid.cpp
	worldconn.cpp
	xml_parser.cpp
	platform.cpp
	process/process.cpp
	json/jsoncpp.cpp
	patches/patches.cpp
	patches/mac.cpp
	patches/mac_limits.cpp
	SocketLib/Base64.cpp
	SocketLib/File.cpp
	SocketLib/MemFile.cpp
	SocketLib/Parse.cpp
	SocketLib/socket_include.cpp
	SocketLib/Utility.cpp
	StackWalker/StackWalker.cpp
	tinyxml/tinystr.cpp
	tinyxml/tinyxml.cpp
	tinyxml/tinyxmlerror.cpp
	tinyxml/tinyxmlparser.cpp
)

SET(common_headers
	additive_lagged_fibonacci_engine.h
	any.h
	base_packet.h
	base_data.h
	bodytypes.h
	chat_oplist.h
	classes.h
	condition.h
	crash.h
	crc16.h
	crc32.h
	data_verification.h
	database.h
	dbcore.h
	deity.h
	emu_constants.h
	emu_limits.h
	emu_opcodes.h
	emu_oplist.h
	emu_tcp_connection.h
	emu_tcp_server.h
	emu_versions.h
	eq_constants.h
	eq_packet_structs.h
	eqdb.h
	eqdb_res.h
	eqemu_exception.h
	eqemu_config.h
	eqemu_config_elements.h
	eqemu_logsys.h
	eqemu_logsys_log_aliases.h
	eq_limits.h
	eq_packet.h
	eq_stream.h
	eq_stream_factory.h
	eq_stream_ident.h
	eq_stream_intf.h
	eq_stream_locator.h
	eq_stream_proxy.h
	eq_stream_type.h
	eqtime.h
	errmsg.h
	extprofile.h
	faction.h
	fastmath.h
	features.h
	fixed_memory_hash_set.h
	fixed_memory_variable_hash_set.h
	global_define.h
	guild_base.h
	guilds.h
	inventory_profile.h
	inventory_slot.h
	ipc_mutex.h
	item_data.h
	item_fieldlist.h
	item_instance.h
	json_config.h
	languages.h
	light_source.h
	linked_list.h
	loottable.h
	md5.h
	memory_buffer.h
	memory_mapped_file.h
	misc.h
	misc_functions.h
	mutex.h
	mysql_request_result.h
	mysql_request_row.h
	op_codes.h
	opcodemgr.h
	packet_dump.h
	packet_dump_file.h
	packet_functions.h
	platform.h
	process/process.h
	proc_launcher.h
	profiler.h
	ptimer.h
	queue.h
	races.h
	random.h
	rdtsc.h
	rulesys.h
	ruletypes.h
	say_link.h
	seperator.h
	servertalk.h
	sha1.h
	shareddb.h
	skills.h
	spdat.h
    	strings.h
	struct_strategy.h
	textures.h
	tcp_basic_server.h
	tcp_connection.h
	tcp_server.h
	timeoutmgr.h
	timer.h
	types.h
	unix.h
	uuid.h
	version.h
	worldconn.h
	xml_parser.h
	zone_numbers.h
	platform.h
	json/json.h
	json/json-forwards.h
	patches/patches.h
	patches/mac.h
	patches/mac_limits.h
	patches/mac_ops.h
	patches/mac_structs.h
	patches/ss_declare.h
	patches/ss_define.h
	patches/ss_register.h
	SocketLib/Base64.h
	SocketLib/File.h
	SocketLib/IFile.h
	SocketLib/MemFile.h
	SocketLib/Parse.h
	SocketLib/socket_include.h
	SocketLib/Utility.h
	StackWalker/StackWalker.h
	tinyxml/tinystr.h
	tinyxml/tinyxml.h
)

SOURCE_GROUP(Event FILES
	event/event_loop.h
	event/timer.h
	event/task.h
)

SOURCE_GROUP(Json FILES
	json/json.h
	json/jsoncpp.cpp
	json/json-forwards.h
)

SOURCE_GROUP(Patches FILES
	patches/patches.h
	patches/ss_declare.h
	patches/ss_define.h
	patches/ss_register.h
	patches/patches.cpp
	patches/mac.h
	patches/mac_ops.h
	patches/mac_structs.h
	patches/mac_limits.h
	patches/mac.cpp
	patches/mac_limits.cpp
)

SOURCE_GROUP(SocketLib FILES
	SocketLib/Base64.h
	SocketLib/File.h
	SocketLib/IFile.h
	SocketLib/MemFile.h
	SocketLib/Parse.h
	SocketLib/socket_include.h
	SocketLib/Utility.h
	SocketLib/Base64.cpp
	SocketLib/File.cpp
	SocketLib/MemFile.cpp
	SocketLib/Parse.cpp
	SocketLib/socket_include.cpp
	SocketLib/Utility.cpp
)

SOURCE_GROUP(StackWalker FILES
	StackWalker/StackWalker.h
	StackWalker/StackWalker.cpp
)

SOURCE_GROUP(TinyXML FILES
	tinyxml/tinystr.h
	tinyxml/tinyxml.h
	tinyxml/tinystr.cpp
	tinyxml/tinyxml.cpp
	tinyxml/tinyxmlerror.cpp
	tinyxml/tinyxmlparser.cpp
)

INCLUDE_DIRECTORIES(Patches SocketLib StackWalker TinyXML)

ADD_LIBRARY(common ${common_sources} ${common_headers})

IF(UNIX)
	SET_SOURCE_FILES_PROPERTIES("patches/mac.cpp" PROPERTIES COMPILE_FLAGS -O0)
ENDIF(UNIX)

SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
